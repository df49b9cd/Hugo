name: CI

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true

jobs:
  build-test-pack:
    name: Build, test, pack (${{ matrix.targetFramework }})
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - targetFramework: net9.0
            resultsDirectory: tests/Hugo.Tests/TestResults/net9
            coverageArtifact: coverage-net9
            packageArtifact: nugetPackage-net9
            sdkVersion: 10.0.x
          - targetFramework: net10.0
            resultsDirectory: tests/Hugo.Tests/TestResults/net10
            coverageArtifact: coverage-net10
            packageArtifact: nugetPackage-net10
            sdkVersion: 10.0.x
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Necessary for GitVersion to work correctly

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ matrix.sdkVersion }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
            ~/.local/share/NuGet/v3-cache
          key: dotnet-${{ runner.os }}-${{ matrix.sdkVersion }}-${{ hashFiles('**/*.csproj', '**/*.props', '**/*.targets', '**/*.sln*') }}
          restore-keys: |
            dotnet-${{ runner.os }}-${{ matrix.sdkVersion }}-
            dotnet-${{ runner.os }}-

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4.1.0
        with:
          versionSpec: '6.4.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4.1.0

      - name: Restore
        run: dotnet restore Hugo.slnx --nologo

      - name: Check formatting
        if: matrix.targetFramework == 'net9.0'
        run: dotnet format whitespace --verify-no-changes --no-restore

      - name: Build
        run: dotnet build Hugo.slnx --configuration Release --no-restore /p:Version=${{ steps.gitversion.outputs.semVer }}

      - name: Test ${{ matrix.targetFramework }} with coverage
        run: dotnet test tests/Hugo.Tests/Hugo.Tests.csproj --configuration Release --no-build --no-restore --framework ${{ matrix.targetFramework }} --collect:"XPlat Code Coverage" --results-directory ${{ matrix.resultsDirectory }}

      - name: Pack
        if: matrix.targetFramework == 'net10.0'
        run: |
          dotnet pack src/Hugo/Hugo.csproj --configuration Release --no-build -p:Version=${{ steps.gitversion.outputs.semVer }} -o ./artifacts/${{ matrix.targetFramework }}
          dotnet pack src/Hugo.Diagnostics.OpenTelemetry/Hugo.Diagnostics.OpenTelemetry.csproj --configuration Release --no-build -p:Version=${{ steps.gitversion.outputs.semVer }} -o ./artifacts/${{ matrix.targetFramework }}

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.coverageArtifact }}
          path: ${{ matrix.resultsDirectory }}/**/*coverage.cobertura.xml
          if-no-files-found: error

      - name: Upload NuGet Package
        if: matrix.targetFramework == 'net10.0'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.packageArtifact }}
          path: ./artifacts/${{ matrix.targetFramework }}/*.nupkg
          if-no-files-found: error

  coverage-report:
    name: Coverage report
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    needs: build-test-pack
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          path: coverage
          merge-multiple: true

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage/**/coverage.cobertura.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Add Coverage PR Comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: code-coverage-results.md

  publish-nuget:
    name: Publish to NuGet
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
    needs: build-test-pack
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download NuGet packages
        uses: actions/download-artifact@v4
        with:
          pattern: nugetPackage-*
          path: ./artifacts
          merge-multiple: true

      - name: Publish to NuGet
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_TOKEN }}
        run: dotnet nuget push ./artifacts/*.nupkg --api-key "$NUGET_AUTH_TOKEN" --source https://api.nuget.org/v3/index.json --skip-duplicate

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    needs:
      - build-test-pack
      - publish-nuget
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: nugetPackage-*
          path: release-artifacts
          merge-multiple: true

      - name: Generate checksums
        working-directory: release-artifacts
        run: |
          set -euo pipefail
          if compgen -G "*.nupkg" > /dev/null; then
            sha256sum *.nupkg > SHA256SUMS.txt
          fi

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          files: release-artifacts/**
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
